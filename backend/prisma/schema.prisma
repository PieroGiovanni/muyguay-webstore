generator client {
  provider = "prisma-client-js"
}

generator typegraphql {
  provider = "typegraphql-prisma"
  emitOnly = ["models", "enums"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Product {
  id                Int             @id @default(autoincrement())
  name              String
  description       String?
  brandId           Int
  tags              String[]
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @default(now()) @updatedAt
  isFeatured        Boolean         @default(false)
  price             Float
  productCategoryId Int
  images            Image[]
  orderItems        OrderItem[]
  brand             Brand           @relation(fields: [brandId], references: [id])
  productCategory   ProductCategory @relation(fields: [productCategoryId], references: [id])
  productColor      ProductColor[]
  stock             Stock?
}

model Brand {
  id        Int       @id @default(autoincrement())
  name      String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now()) @updatedAt
  products  Product[]
}

model ProductCategory {
  id        Int       @id @default(autoincrement())
  name      String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now()) @updatedAt
  products  Product[]
}

model User {
  id          Int      @id @default(autoincrement())
  email       String   @unique
  address     String?
  phoneNumber String?
  userType    UserType @default(CLIENT)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now()) @updatedAt
  password    String?
  displayName String
  orders      Order[]
}

model Order {
  id             Int            @id @default(autoincrement())
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @default(now()) @updatedAt
  userId         Int
  shippingStatus ShippingStatus @default(POR_ENTREGAR)
  paymentStatus  PaymentStatus  @default(PENDIENTE)
  user           User           @relation(fields: [userId], references: [id])
  orderItems     OrderItem[]
}

model OrderItem {
  id        Int      @id @default(autoincrement())
  orderId   Int
  productId Int
  quantity  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  order     Order    @relation(fields: [orderId], references: [id])
  product   Product  @relation(fields: [productId], references: [id])
}

model Stock {
  productId     Int      @id
  stockQuantity Int      @default(1)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @default(now()) @updatedAt
  product       Product  @relation(fields: [productId], references: [id])
}

model Color {
  id           Int            @id @default(autoincrement())
  name         String
  hexCode      String?
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @default(now()) @updatedAt
  image        Image[]
  productColor ProductColor[]
}

model ProductColor {
  productId Int
  colorId   Int
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  color     Color    @relation(fields: [colorId], references: [id])
  product   Product  @relation(fields: [productId], references: [id])

  @@id([productId, colorId])
}

model Image {
  id                 Int      @id @default(autoincrement())
  productId          Int
  colorId            Int?
  imageUrl           String?
  createdAt          DateTime @default(now())
  updatedAt          DateTime @default(now()) @updatedAt
  cloudinaryPublicId String?
  color              Color?   @relation(fields: [colorId], references: [id])
  product            Product  @relation(fields: [productId], references: [id])
}

enum PaymentStatus {
  PENDIENTE
  PAGADO
  PAGO_FALLIDO
  REINTEGRADO
}

enum ShippingStatus {
  ENTREGADO
  POR_ENTREGAR
  CANCELADO
}

enum UserType {
  ADMIN
  CLIENT
}
