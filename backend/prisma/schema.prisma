// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

generator typegraphql {
  provider = "typegraphql-prisma"
  emitOnly = "models"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Product {
  id            Int             @id @default(autoincrement())
  name          String
  price         Decimal
  description   String?
  brand         Brand           @relation(fields: [brandId], references: [id])
  brandId       Int
  category      Category        @relation(fields: [categoryId], references: [id])
  categoryId    Int
  tags          Int[]
  OrderItems    OrderItems[]
  Stock         Stock[]
  isFeatured    Boolean         @default(false)
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @default(now()) @updatedAt
  Product_Color Product_Color[]
  Image         Image[]
}

model Brand {
  id        Int       @id @default(autoincrement())
  name      String
  Product   Product[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now()) @updatedAt
}

model Category {
  id        Int       @id @default(autoincrement())
  name      String
  Product   Product[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now()) @updatedAt
}

model Customer {
  id          Int      @id @default(autoincrement())
  name        String
  lastName    String
  email       String
  address     String?
  phoneNumber String
  Order       Order[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now()) @updatedAt
}

model Order {
  id             Int           @id @default(autoincrement())
  customer       Customer      @relation(fields: [customerId], references: [id])
  customerId     Int
  totalAmount    Decimal
  paymentStatus  PaymentSatus?
  shippingStatus String?
  OrderItems     OrderItems[]
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @default(now()) @updatedAt
}

enum PaymentSatus {
  PENDING
  PAID
  FAILED
  REFUNDED
}

model OrderItems {
  id        Int      @id @default(autoincrement())
  order     Order    @relation(fields: [orderId], references: [id])
  orderId   Int
  product   Product  @relation(fields: [productId], references: [id])
  productId Int
  quantity  Int
  price     Decimal
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model Stock {
  product       Product  @relation(fields: [productId], references: [id])
  productId     Int      @id
  stockQuantity Int
  createdAt     DateTime @default(now())
  updatedAt     DateTime @default(now()) @updatedAt
}

model Color {
  id            Int             @id @default(autoincrement())
  name          String
  hexCode       String?
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @default(now()) @updatedAt
  Product_Color Product_Color[]
  Image         Image[]
}

model Product_Color {
  productId Int
  colorId   Int
  product   Product  @relation(fields: [productId], references: [id])
  color     Color    @relation(fields: [colorId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@id([productId, colorId])
}

model Image {
  id        Int      @id @default(autoincrement())
  productId Int
  colorId   Int?
  imageUrl  String
  product   Product  @relation(fields: [productId], references: [id])
  color     Color?   @relation(fields: [colorId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}
