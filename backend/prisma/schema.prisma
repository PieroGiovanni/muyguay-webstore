// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

generator typegraphql {
  provider = "typegraphql-prisma"
  emitOnly = "models"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Product {
  id            Int            @id @default(autoincrement())
  name          String
  price         Decimal
  description   String?
  brand         Brand          @relation(fields: [brandId], references: [id])
  brandId       Int
  productTypeId Int
  productType   ProductType    @relation(fields: [productTypeId], references: [id])
  tags          Int[]
  orderItems    OrderItem[]
  stock         Stock?
  isFeatured    Boolean        @default(false)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @default(now()) @updatedAt
  productColor  ProductColor[]
  images        Image[]
}

model Brand {
  id        Int       @id @default(autoincrement())
  name      String
  products  Product[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now()) @updatedAt
}

model ProductCategory {
  id           Int           @id @default(autoincrement())
  name         String
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @default(now()) @updatedAt
  productTypes ProductType[]
}

model ProductType {
  id                Int             @id @default(autoincrement())
  name              String
  productCategoryId Int
  productCategory   ProductCategory @relation(fields: [productCategoryId], references: [id])
  products          Product[]
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @default(now()) @updatedAt
}

model User {
  id          Int      @id @default(autoincrement())
  displayName String
  password    String?
  email       String   @unique
  address     String?
  phoneNumber String?
  userType    UserType @default(CLIENT)
  orders      Order[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now()) @updatedAt
}

model Order {
  id             Int            @id @default(autoincrement())
  user           User           @relation(fields: [userId], references: [id])
  userId         Int
  paymentStatus  PaymentSatus   @default(PENDING)
  shippingStatus ShippingStatus @default(POR_ENTREGAR)
  orderItems     OrderItem[]
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @default(now()) @updatedAt
}

enum PaymentSatus {
  PENDING
  PAID
  FAILED
  REFUNDED
}

enum ShippingStatus {
  ENTREGADO
  POR_ENTREGAR
}

enum UserType {
  ADMIN
  CLIENT
}

model OrderItem {
  id        Int      @id @default(autoincrement())
  order     Order    @relation(fields: [orderId], references: [id])
  orderId   Int
  product   Product  @relation(fields: [productId], references: [id])
  productId Int
  quantity  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model Stock {
  productId     Int      @id
  product       Product  @relation(fields: [productId], references: [id])
  stockQuantity Int      @default(1)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @default(now()) @updatedAt
}

model Color {
  id           Int            @id @default(autoincrement())
  name         String
  hexCode      String?
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @default(now()) @updatedAt
  productColor ProductColor[]
  image        Image[]
}

model ProductColor {
  productId Int
  colorId   Int
  product   Product  @relation(fields: [productId], references: [id])
  color     Color    @relation(fields: [colorId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@id([productId, colorId])
}

model Image {
  id                 Int      @id @default(autoincrement())
  productId          Int
  colorId            Int?
  imageUrl           String
  cloudinaryPublicId String?
  product            Product  @relation(fields: [productId], references: [id])
  color              Color?   @relation(fields: [colorId], references: [id])
  createdAt          DateTime @default(now())
  updatedAt          DateTime @default(now()) @updatedAt
}
